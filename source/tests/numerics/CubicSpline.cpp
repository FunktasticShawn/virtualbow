#include "solver/numerics/CubicSpline.hpp"
#include <catch2/catch.hpp>
#include <iostream>

TEST_CASE("cubic-spline-interpolation") {

    // Create some splines with same input data but different boundary conditions,
    // then compare values, first and second derivatives to reference data
    // generated with tk::spline (https://github.com/ttk592/spline/)

    std::vector<double> x = {0.0, 20.0, 40.0, 60.0, 80.0, 100.0};
    std::vector<double> y = {60.0, 70.0, 50.0, 30.0, 20.0, 20.0};

    CubicSpline spline_01(x, y, false, BoundaryType::SECOND_DERIVATIVE, 0.0, BoundaryType::SECOND_DERIVATIVE, 0.0);
    CubicSpline spline_02(x, y, false, BoundaryType::SECOND_DERIVATIVE, 1.5, BoundaryType::SECOND_DERIVATIVE, -1.5);
    CubicSpline spline_03(x, y, false, BoundaryType::FIRST_DERIVATIVE, 0.5, BoundaryType::FIRST_DERIVATIVE, -0.5);

    std::vector<double> ref_01_x = {0.0, 5.0, 10.0, 15.0, 20.0, 25.0, 30.0, 35.0, 40.0, 45.0, 50.0, 55.0, 60.0, 65.0, 70.0, 75.0, 80.0, 85.0, 90.0, 95.0, 100.0};
    std::vector<double> ref_01_y = {60.0000000000, 64.3503289474, 67.9605263158, 70.0904605263, 70.0000000000, 67.2203947368, 62.3684210526, 56.3322368421, 50.0000000000, 44.1118421053, 38.8157894737, 34.1118421053, 30.0000000000, 26.4884868421, 23.6184210526, 21.4391447368, 20.0000000000, 19.3092105263, 19.2105263158, 19.5065789474, 20.0000000000};
    std::vector<double> ref_01_dydx = {0.894736842105, 0.820723684211, 0.598684210526, 0.228618421053, -0.289473684211, -0.792763157895, -1.11842105263, -1.26644736842, -1.23684210526, -1.11842105263, -1.00000000000, -0.881578947368, -0.763157894737, -0.639802631579, -0.506578947368, -0.363486842105, -0.210526315789, -0.0723684210526, 0.0263157894737, 0.0855263157895, 0.105263157895 };
    std::vector<double> ref_01_dydx2 = {0.0000000000000, -0.0296052631579, -0.0592105263158, -0.0888157894737, -0.118421052632, -0.0828947368421, -0.0473684210526, -0.0118421052632, 0.0236842105263, 0.0236842105263, 0.0236842105263, 0.0236842105263, 0.0236842105263, 0.0256578947368, 0.0276315789474, 0.0296052631579, 0.0315789473684, 0.0236842105263, 0.0157894736842, 0.00789473684211, 0.0000000000000};

    std::vector<double> ref_02_x = {0.0, 5.0, 10.0, 15.0, 20.0, 25.0, 30.0, 35.0, 40.0, 45.0, 50.0, 55.0, 60.0, 65.0, 70.0, 75.0, 80.0, 85.0, 90.0, 95.0, 100.0};
    std::vector<double> ref_02_y = {60.0000000000, 37.9298744019, 40.6877990431, 55.6018241627, 70.0000000000, 74.0385765550, 69.1866028708, 59.7413277512, 50.0000000000, 43.2595693780, 38.8157894737, 34.9641148325, 30.0000000000, 23.0793959330, 16.8002392344, 14.6209629187, 20.0000000000, 33.7978468900, 46.4832535885, 45.9270334928, 20.0000000000};
    std::vector<double> ref_02_dydx = {-7.74162679426, -1.50882177033, 2.18959330144, 3.35361842105, 1.98325358852, -0.224581339713, -1.57296650718, -2.06190191388, -1.69138755981, -1.06160287081, -0.772727272727, -0.82476076555, -1.21770334928, -1.43525717703, -0.961124401914, 0.204694976077, 2.06220095694, 3.05263157895, 1.61722488038, -2.24401913876, -8.53110047847};
    std::vector<double> ref_02_dydx2 = {1.500000000000, 0.993122009569, 0.486244019139, -0.0206339712919, -0.527511961722, -0.355622009569, -0.183732057416, -0.0118421052632, 0.16004784689, 0.0918660287081, 0.0236842105263, -0.0444976076555, -0.112679425837, 0.0256578947368, 0.163995215311, 0.302332535885, 0.440669856459, -0.0444976076555, -0.52966507177, -1.01483253589, -1.50000000000};

    std::vector<double> ref_03_x = {0.0, 5.0, 10.0, 15.0, 20.0, 25.0, 30.0, 35.0, 40.0, 45.0, 50.0, 55.0, 60.0, 65.0, 70.0, 75.0, 80.0, 85.0, 90.0, 95.0, 100.0};
    std::vector<double> ref_03_y = {60.0000000000, 63.1436901914, 66.7165071770, 69.4310705742, 70.0000000000, 67.5254186603, 62.6674641148, 56.4757775120, 50.0000000000, 44.0983851675, 38.8636363636, 34.1970693780, 30.0000000000, 26.2372906699, 23.1279904306, 20.9546949761, 20.0000000000, 20.3274521531, 21.1244019139, 21.3591507177, 20.0000000000};
    std::vector<double> ref_03_dydx = {0.500000000000, 0.714563397129, 0.671650717703, 0.371261961722, -0.186602870813, -0.768241626794, -1.13995215311, -1.30173444976, -1.25358851675, -1.11034688995, -0.986842105263, -0.883074162679, -0.799043062201, -0.696620813397, -0.537679425837, -0.322218899522, -0.0502392344498, 0.146830143541, 0.137559808612, -0.0780502392344, -0.5000000000000};
    std::vector<double> ref_03_dydx2 = {0.0686602870813, 0.0171650717703, -0.0343301435407, -0.0858253588517, -0.137320574163, -0.0953349282297, -0.0533492822967, -0.0113636363636, 0.0306220095694, 0.0266746411483, 0.0227272727273, 0.0187799043062, 0.0148325358852, 0.0261363636364, 0.0374401913876, 0.0487440191388, 0.0600478468900, 0.0187799043062, -0.0224880382775, -0.0637559808612, -0.105023923445};

    const double margin = 1e-11;

    for(size_t i = 0; i < ref_01_x.size(); ++i) {
        REQUIRE(spline_01(ref_01_x[i])        == Approx(ref_01_y[i]).margin(margin));
        REQUIRE(spline_01.deriv1(ref_01_x[i]) == Approx(ref_01_dydx[i]).margin(margin));
        REQUIRE(spline_01.deriv2(ref_01_x[i]) == Approx(ref_01_dydx2[i]).margin(margin));
    }

    for(size_t i = 0; i < ref_02_x.size(); ++i) {
        REQUIRE(spline_02(ref_02_x[i])        == Approx(ref_02_y[i]).margin(margin));
        REQUIRE(spline_02.deriv1(ref_02_x[i]) == Approx(ref_02_dydx[i]).margin(margin));
        REQUIRE(spline_02.deriv2(ref_02_x[i]) == Approx(ref_02_dydx2[i]).margin(margin));
    }

    for(size_t i = 0; i < ref_03_x.size(); ++i) {
        REQUIRE(spline_03(ref_03_x[i])        == Approx(ref_03_y[i]).margin(margin));
        REQUIRE(spline_03.deriv1(ref_03_x[i]) == Approx(ref_03_dydx[i]).margin(margin));
        REQUIRE(spline_03.deriv2(ref_03_x[i]) == Approx(ref_03_dydx2[i]).margin(margin));
    }
}

